
#include <zephyr/dt-bindings/sensor/qdec_stm32.h>
/{
	pwmmotors {
		compatible = "pwm-motors";
		sabertooth1_1: pwm_1 {
			pwms  = <&pwm2 1 PWM_MSEC(20) (PWM_POLARITY_NORMAL)>;
			min-pulse = <PWM_USEC(1100)>;
			max-pulse = <PWM_USEC(1900)>;
		};
		sabertooth1_2: pwm_2 {
			pwms  = <&pwm2 2 PWM_MSEC(20) (PWM_POLARITY_NORMAL)>;
			min-pulse = <PWM_USEC(1100)>;
			max-pulse = <PWM_USEC(1900)>;
		};
		sabertooth3_1: pwm_3 {
			pwms  = <&pwm2 3 PWM_MSEC(20) (PWM_POLARITY_NORMAL)>;
			min-pulse = <PWM_USEC(1100)>;
			max-pulse = <PWM_USEC(1900)>;
		};
		sabertooth3_2: pwm_4 {
			pwms  = <&pwm2 4 PWM_MSEC(20) (PWM_POLARITY_NORMAL)>;
			min-pulse = <PWM_USEC(1100)>;
			max-pulse = <PWM_USEC(1900)>;
		};
		cytron1_1: pwm_5 {
			pwms  = <&pwm3 1 PWM_MSEC(20) (PWM_POLARITY_NORMAL)>;
			min-pulse = <PWM_USEC(1100)>;
			max-pulse = <PWM_USEC(1900)>;
		};
		cytron1_2: pwm_6 {
			pwms  = <&pwm3 2 PWM_MSEC(20) (PWM_POLARITY_NORMAL)>;
			min-pulse = <PWM_USEC(1100)>;
			max-pulse = <PWM_USEC(1900)>;
		};
		cytron3_1: pwm_7 {
			pwms  = <&pwm4 1 PWM_MSEC(20) (PWM_POLARITY_NORMAL)>;
			min-pulse = <PWM_USEC(1100)>;
			max-pulse = <PWM_USEC(1900)>;
		};
		cytron3_2: pwm_8 {
			pwms  = <&pwm4 2 PWM_MSEC(20) (PWM_POLARITY_NORMAL)>;
			min-pulse = <PWM_USEC(1100)>;
			max-pulse = <PWM_USEC(1900)>;
		};
		servo_1: pwm_9 {
			pwms  = <&pwm4 3 PWM_MSEC(20) (PWM_POLARITY_NORMAL)>;
			min-pulse = <PWM_USEC(1100)>;
			max-pulse = <PWM_USEC(1900)>;
		};
		servo_2: pwm_10 {
			pwms  = <&pwm4 4 PWM_MSEC(20) (PWM_POLARITY_NORMAL)>;
			min-pulse = <PWM_USEC(1100)>;
			max-pulse = <PWM_USEC(1900)>;
		};
		servo_3: pwm_11 {
			pwms  = <&pwm12 1 PWM_MSEC(20) (PWM_POLARITY_NORMAL)>;
			min-pulse = <PWM_USEC(1100)>;
			max-pulse = <PWM_USEC(1900)>;
		};

		extra_1: pwm_12 {
			pwms = <&pwm12 2 PWM_MSEC(20)  (PWM_POLARITY_NORMAL)>;
			min-pulse = <PWM_USEC(1100)>;
			max-pulse = <PWM_USEC(1900)>;
		};

		extra_2: pwm_13 {
			pwms = <&pwm13 1 PWM_MSEC(20)  (PWM_POLARITY_NORMAL)>;
			min-pulse = <PWM_USEC(1100)>;
			max-pulse = <PWM_USEC(1900)>;
		};
	};
	aliases {
			debug-uart = &usart2;
			mother-uart = &usart1;
			en-fr = &qenc_fr;
			en-fl = &qenc_fl;
			imu-lower-joint = &lj_imu;
			imu-upper-joint = &uj_imu;
	};
 chosen {
                zephyr,console = &usart2;
                zephyr,shell-uart = &usart2;
	};
};
&usart1 {
	pinctrl-0 = <&usart1_tx_pb6 &usart1_rx_pb7>;
	pinctrl-names= "default";
	status = "okay";
	current-speed = <100000>;
	parity = "even";
	stop-bits = "2";
};
&usart2 {
        pinctrl-0 = <&usart2_tx_pd5 &usart2_rx_pd6>;
        pinctrl-names= "default";
        status = "okay";
        current-speed = <115200>;
};
&timers2 {
	status = "okay";
	st,prescaler = <5599>;

	pwm2: pwm {
		status = "okay";
		pinctrl-0 = <&tim2_ch1_pa0 &tim2_ch2_pa1 &tim2_ch3_pa2 &tim2_ch4_pa3>;
		pinctrl-names = "default";
	};
};

&timers3 {
	status = "okay";
	st,prescaler = <5599>;

	pwm3: pwm {
		status = "okay";
		pinctrl-0 = <&tim3_ch1_pb4 &tim3_ch2_pb5>;
		pinctrl-names = "default";
	};
};

&timers4 {
	status = "okay";
	st,prescaler = <5599>;

	pwm4: pwm {
		status = "okay";
		pinctrl-0 = <&tim4_ch1_pd12 &tim4_ch2_pd13 &tim4_ch3_pd14 &tim4_ch4_pd15>;
		pinctrl-names = "default";
	};
};

&timers12 {
	status = "okay";
	st,prescaler = <5599>;

	pwm12: pwm {
		status = "okay";
		pinctrl-0 = <&tim12_ch1_pb14 &tim12_ch2_pb15>;
		pinctrl-names = "default";
	};
};

&timers13 {
	status = "okay";
	st,prescaler = <5599>;

	pwm13: pwm {
		status = "okay";
		pinctrl-0 = <&tim13_ch1_pa6>;
		pinctrl-names = "default";
	};
};

&timers1 {
	status = "okay";
	qenc_fr: qdec {
		compatible = "st,stm32-qdec-distance";
		status = "okay";
		pinctrl-0 = <&tim1_ch1_pa8 &tim1_ch2_pa9>;
		pinctrl-names = "default";
		st,input-polarity-inverted;
		st,input-filter-level = <FDIV32_N5>;
		st,counts-per-revolution = <4706>;
	};
};

&timers8 {
	status = "okay";
 	qenc_fl: qdec {
 		compatible = "st,stm32-qdec-distance";
 		status = "okay";
 		pinctrl-0 = <&tim8_ch1_pc6 &tim8_ch2_pc7>;
 		pinctrl-names = "default";
 		st,input-polarity-inverted;
 		st,input-filter-level = <FDIV32_N5>;
 		st,counts-per-revolution = <4706>;
 	};
};


&i2c1 {
	status = "okay";
	pinctrl-0  = <&i2c1_scl_pb6 &i2c1_sda_pb7>;
	pinctrl-names = "default";
	clock-frequency = <I2C_BITRATE_STANDARD>;
	lj_imu: mpu6050@68 {
		compatible = "invensense,mpu6050";
		reg = <0x68>;
		status = "okay";
	};
	uj_imu: mpu6050@69 {
		compatible = "invensense,mpu6050";
		reg = <0x69>;
		status = "okay";
	};
};

&i2c2 {
	status = "okay";
	pinctrl-0  = <&i2c2_scl_pb10 &i2c2_sda_pb11>;
	pinctrl-names = "default";
	clock-frequency = <I2C_BITRATE_STANDARD>;
	mpu6050@68 {
		compatible = "invensense,mpu6050";
		reg = <0x68>;
		status = "okay";
	};
	mpu6050@69 {
		compatible = "invensense,mpu6050";
		reg = <0x69>;
		status = "okay";
	};
};

&i2c4 {
	status = "okay";
	pinctrl-0  = <&i2c4_scl_pf14 &i2c4_sda_pf15>;
	pinctrl-names = "default";
	clock-frequency = <I2C_BITRATE_STANDARD>;
	mpu6050@68 {
		compatible = "invensense,mpu6050";
		reg = <0x68>;
		status = "okay";
	};
	mpu6050@69 {
		compatible = "invensense,mpu6050";
		reg = <0x69>;
		status = "okay";
	};
};
